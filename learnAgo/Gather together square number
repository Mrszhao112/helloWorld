这是蓝桥杯的一道竞赛题 利用在这里使用了c++

凑平方数

把0~9这10个数字，分成多个组，每个组恰好是一个平方数，这是能够办到的。
比如：0, 36, 5948721
再比如：
1098524736
1, 25, 6390784
0, 4, 289, 15376
等等…
注意，0可以作为独立的数字，但不能作为多位数字的开始。
分组时，必须用完所有的数字，不能重复，不能遗漏。
如果不计较小组内数据的先后顺序，请问有多少种不同的分组方案？

#include <iostream>
#include <algorithm>
#include <queue>
#define _for(i, a) for(ll i = 0; i < (a); i++)
#define _rep(i, a, b) for(ll i = (a); i <= (b); i++)
#define ll long long
#define maxn 10000000000
#define maxl 100000
using namespace std;

ll dat[100005], dl = 0;//maxl:100000
ll ans = 0, roa[7];

void start() {
	memset(dat, 0, sizeof(dat));
	for (ll i = 0; i * i < maxn; i++) dat[dl++] = i * i;
}
bool ched(ll *a, ll al) {
	bool b[10] = { false };
	if (a[0] == 0) b[0] = 1;
	_for(i, al) {
		ll tem = a[i];
		while (tem) {
			if (b[tem % 10] == 1) {
				return 0;
			}
			b[tem % 10] = 1;
			tem /= 10;
		}
	}
	return 1;
}
bool finched(ll *a, ll al) {
	bool b[10] = { false };
	if (a[0] == 0) b[0] = 1;
	_for(i, al) {
		ll tem = a[i];
		while (tem) {
			b[tem % 10] = 1;
			tem /= 10;
		}
	}
	_for(i, 10) {
		if (b[i] == 0) return 0;
	}
	return 1;
}
void dfs(ll loc, ll al) {
	if (ched(roa, al) == 0) return;
	if (finched(roa, al)) {
		ans++;
		printf("%lld: ", ans);
		_for(i, al) {
			cout << roa[i] << " ";
		}
		cout << "\n";
		return;
	}
	_rep(i, loc + 1, maxl - 1) {
		roa[al] = dat[i];
		dfs(i, al + 1);
	}
}
int main() {
	start();
	_for(i, maxl) {
		roa[0] = dat[i];
		dfs(i, 1);
	}
	cout << ans;
	return 0;
}

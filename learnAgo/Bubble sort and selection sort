
#include<stdio.h>
#define N 5
void  choice(int a[])
{
    int i,j,max,min,t;
    for(i=0;i<N/2;i++)
    {   
        max=i;
        min=i;
        for(j=i+1;j<N-i;j++)
        {
            if(a[max]<a[j])
                max=j;
            else if(a[min]>a[j])
                min=j;
        }
        if(i!=max)
        {
            t=a[i];
            a[i]=a[max];
            a[max]=t;
            if(min==i)
            {
                min=max;
            }
        }
        if(N-1-i!=min)
        {
            t=a[N-1-i];
            a[N-1-i]=a[min];
            a[min]=t;
        }
    }
    printf("选择排序结果:\n");
    for(i=0;i<N;i++)
        printf("%3d",a[i]);
}
void bubble(int a[])
{
    int i,j,t,change=1;
    for(i=0;i<N&&change;i++)
    {
        change=0;
        for(j=0;j<N-1-i;j++)
            if(a[j]<a[j+1])
            {
                t=a[j];
                a[j]=a[j+1];
                a[j+1]=t;
                change=1;
            }
            if(change==1)  //冒泡排序的一个优化
            {
            break;
            }

    }
    printf("冒泡排序结果:\n");
    for(i=0;i<N;i++)
        printf("%3d",a[i]);
}

void main()
{
    int a[N],i;
    printf("请输入%d个整数:\n",N);
    for(i=0;i<N;i++)        
        scanf("%d",a+i);
     choice(a);
    printf("\n\n\n");
   bubble(a);
}

2.增加一个快速排序
代码实现


public class Main{
    public static void sort(Comparable[] array) {
        sort(array, 0, array.length - 1);
    }

    private static void sort(Comparable[] array, int start, int end) {
        if (end <= start)
            return;

        int index = partition(array, start, end);
        sort(array, start, index - 1);
        sort(array, index + 1, end);
    }

    private static boolean less(Comparable a, Comparable b) {
        return a.compareTo(b) < 0;
    }

    // 交换
    private static void exec(Comparable a[], int i, int j) {
        Comparable t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
    /*
     * 切分数组
     */
    private static int partition(Comparable[] array, int start, int end) {
        int l = start, r = end + 1;
        int index = rand(start, end);
        exec(array, start, index);
        Comparable v = array[0];
        while (true) {
            while (less(array[++l], v))
                if (l == end) {
                    break;
                }
            while (less(v, array[--r]))
                if (r == start)
                    break;
            if (r <= l)
                break;
            exec(array, l, r);
        }
        exec(array, start, r);

        return r;
    }

    /*
     * 返回st-end之间的一个随机数
     */
    private static int rand(int st, int end) {
        if (st > end) {
            return 0;
        }
        Random rand = new Random();
        int r = rand.nextInt((end - st + 1)) + 1;
        return (st - 1) + r;
    }
}


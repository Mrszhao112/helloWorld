因为疫情期间没有电脑可以使用，因此将书本学习以及手机leetcode以及CSDN中
遇到的，做过的一些题目继续上传至该文档，以备后序开学之后可以进行代码回顾
万事讲究一个坚持，加油

1.给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
int removeElement(int* nums, int numsSize, int val){
    //k记录不等于val的个数
    int k=0;
    for (int i=0;i<numsSize;i++){
        if (nums[i]!=val){
            nums[k] = nums[i];
            k++;
        }
    }
    return k;//新的顺序表的长度
}

2.给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

int removeDuplicates(int* nums, int numsSize)
{
    int np1 = 0, np2 = 0, dst = 0;
	while (np2 < numsSize)
	{
		nums[dst++] = nums[np1];
		while (nums[np1] == nums[np2])
		{
			np2++;
            if(np2==numsSize)
            {
                break;
            }
		}
		np1 = np2;
	}
	return dst;
}

3.给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。
说明:
初始化 nums1 和 nums2 的元素数量分别为 m 和 n。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。

void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) 
{
    if (m==0)
	{
		for (int i=0;i<n;i++)
		{
			nums1[i] = nums2[i];
		}
	}
	int end1 = m - 1;
	int end2 = n - 1;
	int dst = m+n-1;
	while (end1>=0||end2>=0) //循环条件
	{
		if (end1>=0&&end2>=0)
		{
			if (nums1[end1] > nums2[end2])
			{
				nums1[dst] = nums1[end1];
				end1--;
				dst--;
			}
			else
			{
				nums1[dst] = nums2[end2];
				end2--;
				dst--;
			}
		}else if (end1 >= 0 && end2 < 0)
		{
			nums1[dst] = nums1[end1];
			end1--;
			dst--;
		}else if (end2 >= 0 && end1 < 0)
		{
			nums1[dst] = nums2[end2];
			end2--;
			dst--;
		}
		
	}
}
4.原地右旋数组
void sortBack(int* arr, int left, int right)
{
	while (left < right)
	{
		int mid = 0;
		mid = arr[left];
		arr[left] = arr[right];
		arr[right] = mid;
		left++;
		right--;
	}
}
void rotate(int* nums, int numsSize, int k)
{
    k=k%numsSize;
	sortBack(nums, 0, numsSize-k-1);
	sortBack(nums, numsSize-k, numsSize-1);
	sortBack(nums, 0, numsSize - 1);
}

5.给定前序求中序
//c++递归，简单清晰
class Solution {
public:
    vector<int> res;
    vector<int> inorderTraversal(TreeNode* root) {
        if(root){
            inorderTraversal(root->left);
            res.push_back(root->val);
            inorderTraversal(root->right);
        }
        return res;
    }
};
6.leetcode 求二叉树深度
class Solution {
public:
    int maxDepth(TreeNode* root) {//简单递归即可求得深度 可以通过深度优先搜索或者广度优先搜索
        //深度优先遍历（DFS          //进行遍历时防止爆栈
        if(root==NULL){
            return 0;
        }
        else{
            int depthl=maxDepth(root->left);
            int depthr=maxDepth(root->right);
            if(depthl>depthr)
                return depthl+1;
            else
                return depthr+1;

        }
    }
};
7.平衡二叉树  这道题结合了二叉树高度进行求解
//平衡二叉树是左右子树高度差不超过一的二叉树
//那么就可以求左右子树高度 如果高度差超过1那么就说明不是
//我们就可以加一个变量进行求解
   struct TreeNode {
   int val;
   TreeNode *left;
   TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };lass Solution {
public:
    int f=0;
    int dfs(TreeNode* root){
        if(root==NULL) return 0;
        int l=dfs(root->left);
        int r=dfs(root->right);
        if(abs(l-r)>1) f=1;
        return max(l,r)+1; 
    }
    bool isBalanced(TreeNode* root) {
        dfs(root);
        if(f) return false;
        else return true;
    }
};
8.二叉树层次遍历并输出
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

typedef struct Queue {
    int front;
    int rear;
    int len;
    struct TreeNode* elms[];
} Queue;

Queue *creatQueue(int len){
    Queue *q = malloc(sizeof(Queue) + len*sizeof(struct TreeNode*));
    q->len = len;
    q->front = 0;
    q->rear = 0;
    return q;
}

void enQueue(Queue *q, struct TreeNode* node){
    if(node == NULL) return;
    if((q->rear+1)%(q->len) == q->front) return;
    q->elms[q->rear] = node;
    q->rear = (q->rear+1)%(q->len);
}

struct TreeNode* outQueue(Queue *q){
    if(q->rear == q->front) return NULL;
    struct TreeNode* node = q->elms[q->front];
    q->front = (q->front+1)%(q->len);
    return node;
}

int maxDepth(struct TreeNode* root){
    if(root == NULL) return 0;
    int left=maxDepth(root->left), right=maxDepth(root->right);
    return 1 + (left>=right ? left : right);
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrderBottom(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    // 计算树的最大深度
    *returnSize = maxDepth(root);

    // 以树的最大深度初始化结果的行数
    int **arrays = malloc(*returnSize * sizeof(int*));
    if(root==NULL) return arrays;// 空树请适可而止

    // 初始化保存每行的列数的数组
    *returnColumnSizes = malloc(*returnSize * sizeof(int));

    // 计算队列需要的最大长度
    // 即满二叉树最末层结点个数+1（因为用循环队列，所以+1）
    const int qMaxLen = (1 << (*returnSize-1)%(CHAR_BIT*sizeof(int))) +1;

    // 创建父队和子队，并把root入父队
    Queue *parentQ = creatQueue(qMaxLen), *childrenQ = creatQueue(qMaxLen);
    enQueue(parentQ, root);

    // level表示层数，遍历从最顶层开始，逐层向下
    // 初始i=1是为了结果的level行的列数正确
    for(int level=*returnSize-1, i=1; level > -1; --level){
        (*returnColumnSizes)[level] = i;
        arrays[level] = malloc(i * sizeof(int));

        // 父亲放到结果里，并且把孩子生出来
        for(i=0; parentQ->rear != parentQ->front; ++i){
            struct TreeNode* node = outQueue(parentQ);
            arrays[level][i] = node->val;
            if(node->left) enQueue(childrenQ, node->left);
            if(node->right) enQueue(childrenQ, node->right);
        }
        // 子队进化成父队
        // 下面的循环结束后会算出下一层父亲的个数
        // 并在下一次循环赋值(*returnColumnSizes)[level]
        for(i=0; childrenQ->rear != childrenQ->front; ++i)
            enQueue(parentQ, outQueue(childrenQ));
    }
    return arrays;
}
9.归并排序的另类实现 csdn所得优秀代码 
寻常归并排序如果处理数据过多容易造成栈溢出 
于是进行优化 采用迭代的思想进行操作 
#include <iostream>

using namespace std;

// 归并排序：把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。可从上到下或从下到上进行。

// 迭代方法实现
template<typename T>
void MergeSort(T arr[], int len){
    T* a = arr;  // 指针a指向原始数组
    T* b = new T[len];  // 指针b指向新创建的一个数组
    for(int seg=1; seg < len; seg+=seg){
        for(int start=0; start < len; start += seg + seg){
            int low = start;
            int mid = min(start+seg, len);
            int high = min(start+seg+seg, len);
            int k = low;
            int start1 = low, end1 = mid;
            int start2 = mid+1, end2 = high;
            while(start1 < end1 && start2 < end2){
                b[k++] = a[start1] < a[start2] ? a[start1++] : a[start2++];
            }

            while(start1 < end1){
                b[k++] = a[start1++];
            }

            while(start2 < end2){
                b[k++] = a[start2++];
            }
        }
        T* temp = a;
        a = b;
        b = temp;
    }
    if(a != arr){
        for(int i=0; i < len; i++){
            b[i] = a[i];
        }
        b = a;
    }
    delete[] b;
}

// 递归方法实现
template<typename T>
void MergeSortRecursiveCore(T arr[], T reg[], int start, int end){
    if(start >= end){
        return;
    }
    int len = end - start;
    int mid = start + (len >> 1);
    int start1 = start, end1 = mid;
    int start2 = mid+1, end2 = end;
    MergeSortRecursiveCore(arr, reg, start1, end1);
    MergeSortRecursiveCore(arr, reg, start2, end2);
    int k = start;
    while(start1 <= end1 && start2 <= end2){
        reg[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];
    }

    while(start1 <= end1){
        reg[k++] = arr[start1++];
    }

    while(start2 <= end2){
        reg[k++] = arr[start2++];
    }

    for(k = start; k<=end; k++){
        arr[k] = reg[k];
    }
}

template<typename T>
void MergeSortRecursive(T arr[], const int len){
    T* reg = new T[len];
    MergeSortRecursiveCore(arr, reg, 0, len-1);
    delete[] reg;
}

10.求二叉树坡度
leetcode

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int res=0;
    int findTilt(TreeNode* root) {
        dfs(root);
        return res;
    }
    int dfs(TreeNode* root){
        if(root==NULL) return 0;
        int l=dfs(root->left);
        int r=dfs(root->right);
        res+=abs(l-r);
        return l+r+root->val;
    }
};



11.归并排序

#include <bits/stdc++.h>

using namespace std;

#define MAX 500000
#define SENTINEL 2000000000

int L[MAX/2+2], R[MAX/2+2];
int cnt;


void merge(int A[], int left, int mid, int right){

	int n1 = mid - left;
	int n2 = right - mid;

	for (int i = 0; i < n1; i++) L[i] = A[left+i];

	for (int i = 0; i < n2; i++) R[i] = A[mid+i];

	L[n1] = R[n2] = SENTINEL;
	
	int i = 0, j = 0;

	for (int k = left; k < right; k++){
		cnt++;
		if (L[i] <= R[j]){
			A[k] = L[i++];
		} else {
			A[k] = R[j++];
		}
	}
}

void mergeSort(int A[], int left, int right){

	if (left+1 < right){
		int mid = (left+right)/2;
		mergeSort(A, left, mid);
		mergeSort(A, mid, right);
		merge(A, left, mid, right);
	}
}

int main(){

	int A[MAX], n, i;
	cnt = 0;

	cin >> n;
	for (i = 0; i < n; i++) cin >> A[i];

	mergeSort(A, 0, n);

	for (i = 0; i < n; i++){
		if (i) cout << ' ';
		cout << A[i];在这里插入图片描述
	}
	cout << endl;

	cout << cnt << endl;

	return 0;
}

12 牛客网 二叉树层序遍历
二叉树层序遍历，按层存储

给定二叉树的根结点root，请返回打印结果，
结果按照每一层一个数组进行储存，
所有数组的顺序按照层数从上往下，
且每一层的数组内元素按照从左往右排列。
保证结点数小于等于500。
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};*/

class TreePrinter {
public:
    vector<vector<int> > printTree(TreeNode* root) {
        int head=-1,tail=-1;	//队头队尾
        TreeNode *q[505],*now;
        map<int,int> dep;		//存储每个结点的高度
        
        if(root==NULL)
            return ans;
        q[++tail]=root;
        dep[root->val]=0;
        while(head!=tail){
            now=q[++head];
            if(now->left){
                q[++tail]=now->left;
                dep[now->left->val]=dep[now->val]+1;		//左孩子的高度为父节点加1
            }
            if(now->right){
                q[++tail]=now->right;
                dep[now->right->val]=dep[now->val]+1;		//右孩子的高度为父节点加1
            }
        }
        vector<vector<int> > ans;
        for(int j,i=0;i<=tail;i=j){
            j=i;
            vector<int> temp;
            while(j<=tail&&dep[q[j]->val]==dep[q[i]->val]){		//如果q[j]和q[i]在同一层，遍历完在同一层的结点
                temp.push_back(q[j]->val);
                ++j;           
            }
            ans.push_back(temp);
        }
        return ans;
    }
};

13.相同二叉树 leetcode 简单题目

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL)
            return true;
        if(p!=NULL && q!=NULL && p->val==q->val)
            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
        else return false;
    }
};


14.对称二叉树 leetcode 判断是否是镜相对称 递归子树判断即可

class Solution {
public:
    bool isSymmetric(TreeNode* root) 
    {
        if(root == NULL)    return true;
        return isMirror(root->left,root->right);
    }
    
    bool isMirror(TreeNode *p,TreeNode *q)          //递归函数
    {
        if(!p && !q)        return true;        //如果p,q均为NULL
        if(!p || !q)        return false;       //p,q只有一者为NULL

        return (p->val==q->val) && isMirror(p->left,q->right) && isMirror(p->right,q->left);        
    }
};
15.leetcode 107
对二叉树进行层序遍历然后逆向输出 
使用了两个队列进行轮换 可以确定每层的数据
我用二叉树层数开辟了一个二维数组的行数
每层的数据大小用二叉树高度进行计算 个人觉得这种解法是有点浪费空间

typedef struct Queue {
    int front;
    int rear;
    int len;
    struct TreeNode* elms[];
} Queue;

Queue *creatQueue(int len){
    Queue *q = malloc(sizeof(Queue) + len*sizeof(struct TreeNode*));
    q->len = len;
    q->front = 0;
    q->rear = 0;
    return q;
}

void enQueue(Queue *q, struct TreeNode* node){
    if(node == NULL) return;
    if((q->rear+1)%(q->len) == q->front) return;
    q->elms[q->rear] = node;
    q->rear = (q->rear+1)%(q->len);
}

struct TreeNode* outQueue(Queue *q){
    if(q->rear == q->front) return NULL;
    struct TreeNode* node = q->elms[q->front];
    q->front = (q->front+1)%(q->len);
    return node;
}

int maxDepth(struct TreeNode* root){
    if(root == NULL) return 0;
    int left=maxDepth(root->left), right=maxDepth(root->right);
    return 1 + (left>=right ? left : right);
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrderBottom(struct TreeNode* root, int* returnSize, int** returnColumnSizes){
    // 计算树的最大深度
    *returnSize = maxDepth(root);

    // 以树的最大深度初始化结果的行数
    int **arrays = malloc(*returnSize * sizeof(int*));
    if(root==NULL) return arrays;// 空树请适可而止

    // 初始化保存每行的列数的数组
    *returnColumnSizes = malloc(*returnSize * sizeof(int));

    // 计算队列需要的最大长度
    // 即满二叉树最末层结点个数+1（因为用循环队列，所以+1）
    const int qMaxLen = (1 << (*returnSize-1)%(CHAR_BIT*sizeof(int))) +1;

    // 创建父队和子队，并把root入父队
    Queue *parentQ = creatQueue(qMaxLen), *childrenQ = creatQueue(qMaxLen);
    enQueue(parentQ, root);

    // level表示层数，遍历从最顶层开始，逐层向下
    // 初始i=1是为了结果的level行的列数正确
    for(int level=*returnSize-1, i=1; level > -1; --level){
        (*returnColumnSizes)[level] = i;
        arrays[level] = malloc(i * sizeof(int));

        // 父亲放到结果里，并且把孩子生出来
        for(i=0; parentQ->rear != parentQ->front; ++i){
            struct TreeNode* node = outQueue(parentQ);
            arrays[level][i] = node->val;
            if(node->left) enQueue(childrenQ, node->left);
            if(node->right) enQueue(childrenQ, node->right);
        }
        // 子队进化成父队
        // 下面的循环结束后会算出下一层父亲的个数
        // 并在下一次循环赋值(*returnColumnSizes)[level]
        for(i=0; childrenQ->rear != childrenQ->front; ++i)
            enQueue(parentQ, outQueue(childrenQ));
    }
    return arrays;
}



//okay

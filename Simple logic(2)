#include<stdio.h>
#include<stdlib.h>
5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果
a选手说：b第二，我第三；
b选手说：我第二，e第四；
c选手说：我第一，d第二；
d选手说：c最后，我第三；
e选手说：我第四，a第一；
比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。
//
//两种算法由浅入深的进行思考


按照简单算法  算法如下
循环找出符合条件的结果  五次for
找出结果排查正确答案

int over(int arr[])//判断数组内的值是否有重复的
{
    int i = 0;
    int j = 0;
    for (i = 0; i < 5; i++)
        for (j = i + 1; j < 5; j++)
	        {
	            if (arr[i] == arr[j])
			     return 0;
		     }
       return 1;
 }

int main()
{
	数组arr[0]~arr[4]分别代表a b c d e
	arr[i]的值表示其名次 
	int arr[5] = { 0 };
	for (arr[0] = 1; arr[0] <= 5; ++arr[0])//对第一个人进行名次假设
	{
		for (arr[1] = 1; arr[1] <= 5; ++arr[1])//名次假设
		{
			for (arr[2] = 1; arr[2] <= 5; ++arr[2])//名次假设
			{
				for (arr[3] = 1; arr[3] <= 5; ++arr[3])//名次假设
				{
					for (arr[4] = 1; arr[4] <= 5; ++arr[4])//名次假设
					{
						条件检测
						if ((arr[1] == 2) + (arr[0] == 3) == 1
							&& (arr[1] == 2) + (arr[4] == 4) == 1
							&& (arr[2] == 1) + (arr[3] == 2) == 1
							&& (arr[2] == 5) + (arr[3] == 3) == 1
							&& (arr[4] == 4) + (arr[0] == 1) == 1)
						{
							if (over(arr) != 0)//调用函数进行比对
							{
								printf("a:%d b:%d c:%d d:%d e:%d\n", arr[0], arr[1], arr[2], arr[3], arr[4]);
							}
						}
					}
				}
			}
		}
	}

	system("pause");
	return 0;
}




//然后我们进行充分思考
//我们发现名次还可以并列 于是
//我们在其中加入了位运算  



#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

int main()
{
	int a = 1;
	int b = 1;
	int c = 1;
	int d = 1;
	int e = 1;

	/*int n = 0;
	int flag = 0;*/

	for (a = 1; a <= 5; a++) //假设第一个人为第一
	{
		for (b = 1; b <= 5; b++)//假设第一个人为第一//可以并列第一
		{
			for (c = 1; c <= 5; c++)//假设第一个人为第一
			{
				for (d = 1; d <= 5; d++)//假设第一个人为第一
				{
					for (e = 1; e <= 5; e++)//假设第一个人为第一//依次循环列出所有结果
					{
						if (((b == 2) + (a == 3)) == 1 &&
							((b == 2) + (e == 4)) == 1 &&
							((c == 1) + (d == 2)) == 1 &&
							((c == 5) + (d == 3)) == 1 &&
							((e == 4) + (a == 1)) == 1)    //满足题目条件（每个选手都说对一半）输出
						{
							int ret = 1;              //判断abcde是否连续 若连续
							ret |= (1 << (a));        //例 ret==0001 1111  ret==0000 1111
							ret |= (1 << (b));        //ret=ret|(1<<(a-1))
							ret |= (1 << (c));        //通过移位操作 是ret有一个二进制的值 
							ret |= (1 << (d));        //a-b是 1-5 因此要减一
							ret |= (1 << (e));

							while (ret)//循环结束 ret = 0
							{
								if (ret % 2 == 0)//排除低位1之间加有0 有0则说明排序不连续
								{
									break;
								}
								ret /= 2;//挨个右移ret的值判断最低位是否为零
							}
							if (ret == 0)//当ret为零时 即正常跳出上述循环！则进行打印 
								printf("final result:a=%d,b=%d,c=%d,d=%d,e=%d\n",a,b,c,d,e);
						}
					}
				}
			}
		}
	}
	system("pause");
	return 0;
}

//记录leetcode刷题时遇到的一些特别的题目 

1.删除链表中等于给定值 val 的所有节点。 
2.反转一个单链表。 
3.给定一个带有头结点 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。
4.输入一个链表，输出该链表中倒数第k个结点。
5.给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

1./**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode ListNode;
//创建新链表 将不为value的值存储下来释放掉原来链表！
struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head==NULL)
    {
        return NULL;
    }
    ListNode* newHead=(ListNode*)malloc(sizeof(ListNode));//创建新链表头节点
    newHead->next=NULL;
    ListNode* ret=newHead;
    ListNode* cur=head;//保存head
    while(cur!=NULL)
    {
        if(cur->val!=val)
        {
        ListNode* newList=(ListNode*)malloc(sizeof(ListNode));
        newList->val=cur->val;
        newList->next=NULL;
        newHead->next=newList;
        newHead=newList;
        cur=cur->next;
        }
        else
        {
        cur=cur->next;
        }
    }
    //保存结束 删除原来链表
    ListNode* DestoryNode=head;
    while(head!=NULL)
    {
        head=head->next;
        free(DestoryNode);
        DestoryNode=head;
    }
    free(head);
    newHead=ret->next;
    free(ret);
    return newHead;

}
//使用额外的空间变相的进行删除


2.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode ListNode;

struct ListNode* reverseList(struct ListNode* head){
    //方法二 直接改变指针的指向
    if(head==NULL||head->next==NULL)
    {
        return head;
    }
    ListNode* lastNode=NULL;
    ListNode* curNode=head;
    ListNode* nextNode=head->next;
    while(1)
    {
        curNode->next=lastNode;//改变链接顺序

        lastNode=curNode;
        curNode=nextNode;

        if(nextNode==NULL)
        {
            break;
        }

        nextNode=nextNode->next;//指针均向后移动
        
    }
    free(curNode);
    free(nextNode);
    return lastNode;
}


3.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode ListNode;
struct ListNode* middleNode(struct ListNode* head){
    if(head==NULL||head->next==NULL)
    {
        return head;
    }

    ListNode* slow=head->next;
    ListNode* fast=head->next->next;
    while(fast!=NULL&&fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
   // free(fast);  不能这项去释放因为fast现在指向的是有效数据！
    return slow;
}

4.牛客
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k)
    {
    //输出链表的倒数底k个节点
    //fast节点先走到k
    //slow节点和fast一起走
    //fast结束 solw为倒数第k个节点
    //注意k超出链表长度  因此取模
    //空链表直接返回 
        if(pListHead==NULL||k==0)
        {
            return NULL;
        }
        ListNode* ListSize=pListHead;
        int count=0;
        while(ListSize!=NULL)
        {
            count++;
            ListSize=ListSize->next;
        }
        
        if(k>count)
         return NULL;
       
        
        ListNode* fast=pListHead;
        ListNode* slow=pListHead;
        while(--k!=0)
        {
            fast=fast->next;
        }
        while(fast->next!=NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }
        return slow;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 typedef struct ListNode ListNode;
struct ListNode *detectCycle(struct ListNode *head) 
{
    //首先判断是否有环并找到相遇点 利用快慢指针
    if(head==NULL||head->next==NULL)
        return NULL;
        
    ListNode* fast=head->next->next;
    ListNode* slow=head->next;
    while(1)
    {
        if(fast==NULL||fast->next==NULL)
            return NULL;

        if(fast==slow)
            break;

        fast=fast->next->next;
        slow=slow->next;
    }
    //已经得到相遇节点
    while(1)
    {
        if(head==slow)
        {
            return head;
        }
        
        slow=slow->next;
        head=head->next;
    }   
}

6.栈实现队列
typedef int STDataType;
typedef struct Stack
{
	STDataType* _a;
	int _top;		// 栈顶
	int _capacity;  // 容量 
}Stack;

// 初始化栈 
void StackInit(Stack* ps)
{
	ps->_a = NULL;
	ps->_top = 0;
	ps->_capacity = 0;
}

// 入栈 
void StackPush(Stack* ps, STDataType data)
{
	assert(ps);

	if (ps->_top == ps->_capacity)
	{
		size_t newcapacity = ps->_capacity == 0 ? 4 : ps->_capacity * 2;
		ps->_a = (STDataType*)realloc(ps->_a, newcapacity*sizeof(STDataType));
		ps->_capacity = newcapacity;
	}

	ps->_a[ps->_top] = data;
	ps->_top++;
}

// 出栈 
void StackPop(Stack* ps)
{
	assert(ps && ps->_top > 0);
	--ps->_top;
}

// 获取栈顶元素 
STDataType StackTop(Stack* ps)
{
	assert(ps);
	return ps->_a[ps->_top - 1];
}

// 获取栈中有效元素个数 
int StackSize(Stack* ps)
{
	assert(ps);

	return ps->_top;
}

// 检测栈是否为空，如果为空返回非零(1)，如果不为空返回0 
bool StackEmpty(Stack* ps)
{
	assert(ps);

	return ps->_top == 0 ? 1 : 0;
}

// 销毁栈 
void StackDestroy(Stack* ps)
{
	assert(ps);

	free(ps->_a);
	ps->_a = NULL;
	ps->_top = ps->_capacity = 0;
}

typedef struct {
    Stack st1;
    Stack st2;    
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() {
    
    MyQueue* myQ=(MyQueue*)malloc(sizeof(MyQueue));
    StackInit(&myQ->st1);
    StackInit(&myQ->st2);
    return myQ;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {//push数据进入队列 利用栈
  if(!StackEmpty(&obj->st1))
  {
      StackPush(&obj->st1,x);
  }
  else
  {
      StackPush(&obj->st2,x);
  }
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) {//删除并且出栈 并且得到它
    Stack* emptySt=&obj->st1;
    Stack* noemptySt=&obj->st2;
    if(!StackEmpty(&obj->st1))
    {
        noemptySt=&obj->st1;
        emptySt=&obj->st2;
    }

    while(!StackEmpty(noemptySt))
    {
        int tmp;
        tmp=StackTop(noemptySt);
        StackPop(noemptySt);
        StackPush(emptySt,tmp);
    }
    int ret=StackTop(emptySt);
    StackPop(emptySt);
    while(!StackEmpty(emptySt))
    {
        int tmp;
        tmp=StackTop(emptySt);
        StackPop(emptySt);
        StackPush(noemptySt,tmp);
    }
    return ret;
  
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) {//得到队列的头元素
      Stack* emptySt=&obj->st1;
    Stack* noemptySt=&obj->st2;
    if(!StackEmpty(&obj->st1))
    {
        noemptySt=&obj->st1;
        emptySt=&obj->st2;
    }

    while(!StackEmpty(noemptySt))
    {
        int tmp;
        tmp=StackTop(noemptySt);
        StackPop(noemptySt);
        StackPush(emptySt,tmp);
    }
    int ret=StackTop(emptySt);
        while(!StackEmpty(emptySt))
    {
        int tmp;
        tmp=StackTop(emptySt);
        StackPop(emptySt);
        StackPush(noemptySt,tmp);
    }
    return ret;
  
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) {//判断是否为空
  return StackEmpty(&obj->st1)&&StackEmpty(&obj->st2);
}

void myQueueFree(MyQueue* obj) {
    StackDestroy(&obj->st1);
    StackDestroy(&obj->st1);

    free(obj);
}

7.队列实现栈
typedef int QDataType;
typedef struct QueueNode
{
	QDataType _data;
	struct QueueNode* _next;
}QueueNode;

typedef struct Queue
{
	struct QueueNode* _front;
	struct QueueNode* _back;
}Queue;

// 初始化队列 
void QueueInit(Queue* q);
// 队尾入队列 
void QueuePush(Queue* q, QDataType data);
// 队头出队列 
void QueuePop(Queue* q);
// 获取队列头部元素 
QDataType QueueFront(Queue* q);
// 获取队列队尾元素 
QDataType QueueBack(Queue* q);
// 获取队列中有效元素个数 
int QueueSize(Queue* q);
// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q);
// 销毁队列 
void QueueDestroy(Queue* q);

// 初始化队列 
void QueueInit(Queue* q)
{
	assert(q);
	q->_front = q->_back = NULL;
}

// 队尾入队列 
void QueuePush(Queue* q, QDataType data)
{
	assert(q);
	QueueNode* newnode = (QueueNode*)malloc(sizeof(QueueNode));
	newnode->_data = data;
	newnode->_next = NULL;

	if (q->_back == NULL)
	{
		q->_front = q->_back = newnode;
	}
	else
	{
		q->_back->_next = newnode;
		q->_back = newnode;
	}
}

// 队头出队列 
void QueuePop(Queue* q)
{
	assert(q);

	if (q->_front->_next == NULL)
	{
		free(q->_front);
		q->_front = q->_back = NULL;
	}
	else
	{
		QueueNode* next = q->_front->_next;
		free(q->_front);
		q->_front = next;
	}
}

// 获取队列头部元素 
QDataType QueueFront(Queue* q)
{
	assert(q);
	return q->_front->_data;
}

// 获取队列队尾元素 
QDataType QueueBack(Queue* q)
{
	assert(q);

	return q->_back->_data;
}

// 获取队列中有效元素个数 
int QueueSize(Queue* q)
{
	int n = 0;
	QueueNode* cur = q->_front;
	while (cur)
	{
		n++;
		cur = cur->_next;
	}

	return n;
}

// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q)
{
	return q->_front == NULL ? 1 : 0;
}

// 销毁队列 
void QueueDestroy(Queue* q)
{
	QueueNode* cur = q->_front;
	while (cur)
	{
		QueueNode* next = cur->_next;
		free(cur);
		cur = next;
	}

	q->_front = q->_back = NULL;
}
//两个队列实现一个栈
typedef struct {  //一个栈由两个队列组成
    Queue q1;
    Queue q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() {//栈的初始化
    MyStack* st=(MyStack*)malloc(sizeof(MyStack));
    QueueInit(&st->q1);
    QueueInit(&st->q2);
    return st;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {//push 数据 两个队列 向不为空的队列进行输入数据    
   	if (!QueueEmpty(&obj->q1))
	{
		QueuePush(&obj->q1, x);
	}
	else
	{
		QueuePush(&obj->q2, x);
	}
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) {
    Queue* pemptyQ = &obj->q1;
	Queue* pnoemptyQ = &obj->q2;
	if (!QueueEmpty(&obj->q1))
	{
		pemptyQ = &obj->q2;
		pnoemptyQ = &obj->q1;
	}//找到空的队列和非空的队列

	while (QueueSize(pnoemptyQ) > 1)
	{
		QueuePush(pemptyQ, QueueFront(pnoemptyQ));
		QueuePop(pnoemptyQ);
	}

	int top = QueueBack(pnoemptyQ);
	QueuePop(pnoemptyQ);
	return top;
}

/** Get the top element. */
int myStackTop(MyStack* obj) {
  if(!QueueEmpty(&obj->q1))
  {
      return QueueBack(&obj->q1);
  }
    else
    {
    return QueueBack(&obj->q2);
    }
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) {
  return QueueEmpty(&obj->q1)&&QueueEmpty(&obj->q2);
}

void myStackFree(MyStack* obj) {
    QueueDestroy(&obj->q1);
    QueueDestroy(&obj->q2);
    free(obj);
}

#include<stdio.h>
#include<stdlib.h>

void move(char x, char y)
{   //移动打印函数
	printf("%c-->%c\n", x, y);
}

void hanoi(int n, char a, char b, char c)
{
	void move(char x, char y);
	if (n == 1)                         //只剩一层 直接进行移动 a》》》c
	{
		move(a, c);
	}
	else
	{
		hanoi(n - 1, a, c, b);     //对除去下面一层进行汉诺塔操作 将a其他的移动到b上 借助c  
		move(a, c);                //进行最后一层 直接a》》》》c
		hanoi(n - 1, b, a, c);     //目前最多的在b上 需要借助a移动到c上面
	}
}
int main()
{
//斐波那契额数列
       int fab2(int n);
	int a = 0;
	a=fab2(6);
	printf("%d", a);
	
	
	
	int n = 0;
	scanf_s("%d", &n);
	hanoi(n, 'a', 'b', 'c');
	system("pause");
	return 0;
}


//同样是递归经典问题 斐波那契额数列问题
//斐波那契数列不同计算方法
//1,1,2,3,5,8
//递归法
int fab1(int n)
{
	if (n==1||n==2)
	{
		return 1;
	}
	return fab1(n-1) + fab1(n-2);
}
//循环法
int fab2(int n)
{
	int a;
	int s;
	int z;
	a = 1;
	s = 1;
	for (int i=2;i<n;i++)
	{
	
	if (n==2||n==1)
	{
		s = 1;
	} 
	else
	{
		z = a + s;//2
		a = s;//1
		s=z;//2
	}
	}
	return s;
}
